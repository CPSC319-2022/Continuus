// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "prisma-zod-generator"
    output   = "../src/generated"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now()) @db.Timestamptz(3) // with a timezone
    // @updatedAt flag automatically updates this field
    updatedAt         DateTime @updatedAt @db.Timestamptz(3) // with a timezone

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    image              String?
    role               Role                 @default(READER)
    accounts           Account[]
    sessions           Session[]
    blogPosts          BlogPost[]
    comments           Comment[]
    createdAt          DateTime             @default(now()) @db.Timestamptz(3) // with a timezone
    // @updatedAt flag automatically updates this field
    updatedAt          DateTime             @updatedAt @db.Timestamptz(3) // with a timezone
    ContributorRequest ContributorRequest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BlogPost {
    id        String    @id @default(cuid())
    userId    String
    title     String
    content   String
    // If we delete the user, we want to delete the blog post
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments  Comment[]
    createdAt DateTime  @default(now()) @db.Timestamptz(3) // with a timezone
    updatedAt DateTime  @updatedAt @db.Timestamptz(3) // with a timezone
}

model Comment {
    id         String   @id @default(cuid())
    userId     String
    blogPostId String
    content    String
    // If we delete the user or the associated blog post, we want to delete the Comment
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now()) @db.Timestamptz(3) // with a timezone
    updatedAt  DateTime @updatedAt @db.Timestamptz(3) // with a timezone
}

model ContributorRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz(3)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    READER
    CONTRIBUTOR
    ADMIN
}
